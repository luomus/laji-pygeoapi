kind: Template
apiVersion: template.openshift.io/v1
parameters:
  - name: DB_SECRET
    required: true
    value: db-secret
  - name: NAMESPACE
    required: true
    value: laji-pygeoapi
  - name: BRANCH
    required: true
    value: dev
  - name: PREFIX
    required: true
    value: ""
  - name: POSTGRES_PASSWORD
    required: true
  - name: POSTGRES_USER
    required: true
  - name: POSTGRES_DB
    required: true
  - name: POSTGRES_STORAGE
    required: true
    value: 10Gi
  - name: STORAGE_CLASS
    required: true
    value: standard-csi
  - name: HOST_URL
    required: true
  - name: HOST_PATH
    required: true
    value: /
  - name: DB_PORT
    required: true
    value: "5432"
  - name: PYGEOAPI_PORT
    required: true
    value: "5000"
  - name: GITHUB_REPOSITORY_URL
    description: The URL of the repository with the application source code 
    value: https://github.com/luomus/laji-pygeoapi.git
    required: true 
  - name: GITHUB_SECRET
    required: true
    generate: expression
    from: "[a-zA-Z0-9]{20}"
  - name: PAGES
    description: Defines the number of pages to download from the laji.fi occurrence API. Default is "all" but for testing purposes, use smaller number, for e.g. 2
    required: true
    value: "1"
  - name: MULTIPROCESSING
    required: true
    value: "False"
  - name: RUNNING_IN_OPENSHIFT
    required: true
    value: "True"
  - name: ACCESS_TOKEN
    description: API Access token for the source API. See https://api.laji.fi/explorer/.
    required: True
  - name: LAJI_API_URL
    required: true
    value: "https://api.laji.fi/v0/"
  - name: INTERNAL_POSTGRES_PASSWORD
    required: true
  - name: INTERNAL_POSTGRES_USER
    required: true
  - name: INTERNAL_POSTGRES_DB
    required: true
  - name: LAJI_AUTH_URL
    required: true
    value: "https://login.laji.fi/laji-auth/"
  - name: RESTRICT_ACCESS
    required: true
    value: "False"
  - name: SECRET_KEY
    required: false
  - name: POSTGRES_CPU_LIMIT
    required: true
    value: "1"
  - name: POSTGRES_MEMORY_LIMIT
    required: true
    value: "500Mi"
  - name: PYGEOAPI_CPU_LIMIT
    required: true
    value: "500m"
  - name: PYGEOAPI_MEMORY_LIMIT
    required: true
    value: "1Gi"
  - name: PYTHON_SCRIPTS_CPU_LIMIT
    required: true
    value: "200m"
  - name: PYTHON_SCRIPTS_MEMORY_LIMIT
    required: true
    value: "1Gi"
    
metadata:
  name: template
  annotations:
    openshift.io/display-name: "OGC API Features for laji.fi data"
    description: >-
        Pygeoapi based server implementation of the OGC API Features standard for the data from laji.fi
        More info: https://github.com/luomus/laji-pygeoapi

objects:
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: postgres-claim-${PREFIX}${BRANCH}
      labels:
        io.kompose.service: postgres-claim-${PREFIX}${BRANCH}
        app: postgres-${PREFIX}${BRANCH}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${POSTGRES_STORAGE}
      storageClassName: ${STORAGE_CLASS}
      volumeMode: Filesystem

  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${DB_SECRET}-${PREFIX}${BRANCH}
    data:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      INTERNAL_POSTGRES_DB: ${INTERNAL_POSTGRES_DB}
      INTERNAL_POSTGRES_PASSWORD: ${INTERNAL_POSTGRES_PASSWORD}
      INTERNAL_POSTGRES_USER: ${INTERNAL_POSTGRES_USER}
    type: Opaque

  - kind: Secret
    apiVersion: v1
    metadata:
      name: pygeoapi-secret-${PREFIX}${BRANCH}
    data:
      SECRET_KEY: ${SECRET_KEY}
    type: Opaque

  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: pygeoapi-config-${PREFIX}${BRANCH}
      labels:
        app: pygeoapi-${PREFIX}${BRANCH}
    data:
      catalogue.tinydb: Empty for now. Python scripts will fill this metadata catalogue.
      pygeoapi-config.yml: |-
        server:
            bind:
                host: 0.0.0.0
                port: ${PYGEOAPI_PORT}
            url: https://${HOST_URL}{HOST_PATH}
            mimetype: application/json; charset=UTF-8
            encoding: utf-8
            gzip: false
            languages:
                - en-US
                - fi-FI
            # cors: true
            pretty_print: true
            limit: 10
            templates:
              path: custom/templates
              static: pygeoapi/pygeoapi/static
            map:
                url: https://tile.openstreetmap.org/{z}/{x}/{y}.png
                attribution: '&copy; <a href="https://openstreetmap.org/copyright">OpenStreetMap contributors</a>'
            # ogc_schemas_location: /opt/schemas.opengis.net
            
        logging:
            level: ERROR
            #logfile: /tmp/pygeoapi.log
        metadata:
            identification:
                title:
                    en: FinBIF occurrence data OGC API
                    fi: Lajitietokeskuksen havaintoaineistojen OGC API -rajapinta
                description:
                    en: This portal allows you to query and fetch virva-filtered occurrence data from the repositories of Finnish Biodiversity Information Facility (FinBIF). Latest update 2024-01-01.
                    fi: Tämän rajapinnan kautta voit hakea viranomaisrajauksin rajattuja lajitietokeskuksen lajihavaintoja. Viimeisin päivitys 2024-01-0.
                keywords:
                    en:
                        - occurrence
                        - geospatial data
                        - api
                    fi:
                        - lajitieto
                        - paikkatieto
                        - rajapinta
                keywords_type: theme
                terms_of_service: https://creativecommons.org/licenses/by/4.0/
                url: https://example.org
            license:
                name: CC-BY 4.0 license
                url: https://creativecommons.org/licenses/by/4.0/
            provider:
                name: Luomus
                url: https://laji.fi/
            contact:
                name: Alpo, Turunen
                position: 
                    en: Spatial Data Specialist
                    fi: Paikkatietoasiantuntija
                address: Pohjoinen Rautatiekatu 13 
                city: Helsinki
                stateorprovince: Uusimaa
                postalcode: FI-00100
                country: 
                    en: Finland
                    fi: Suomi
                phone: +358 29 412 8819
                email: alpo.turunen@helsinki.fi
                url: 
                    en: https://laji.fi/en
                    fi: https://laji.fi/
                role: pointOfContact
        resources:

  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: init-database-${PREFIX}${BRANCH}
      labels:
        app: pygeoapi-${PREFIX}${BRANCH}
    data:
      init-database.sh: |-
        #!/bin/bash
        set -e
        
        psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
            CREATE USER $INTERNAL_POSTGRES_USER WITH PASSWORD '$INTERNAL_POSTGRES_PASSWORD';
            CREATE DATABASE $INTERNAL_POSTGRES_DB;
            GRANT ALL PRIVILEGES ON DATABASE $INTERNAL_POSTGRES_DB TO $INTERNAL_POSTGRES_USER;
            ALTER DATABASE $INTERNAL_POSTGRES_DB OWNER TO $INTERNAL_POSTGRES_USER;
        EOSQL

  - kind: ServiceAccount
    apiVersion: v1
    metadata:
      name: configmap-update-sa-${PREFIX}${BRANCH}
      labels:
        app: python-scripts-${PREFIX}${BRANCH}
    secrets:
      - name: ${DB_SECRET}-${PREFIX}${BRANCH}
  
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: postgres-${PREFIX}${BRANCH}
      labels:
        io.kompose.service: postgres-${PREFIX}${BRANCH}
        app: postgres-${PREFIX}${BRANCH}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: latest
          from:
            kind: DockerImage
            name: postgis/postgis
          generation: 1
          importPolicy:
            importMode: Legacy
          referencePolicy:
            type: Source

  - kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: configmap-update-role-${PREFIX}${BRANCH}
      labels:
        app: python-scripts-${PREFIX}${BRANCH}
    rules:
      - verbs:
          - patch
        apiGroups:
          - ''
        resources:
          - configmaps
        resourceNames:
          - pygeoapi-config-${PREFIX}${BRANCH}
      - verbs:
          - delete
          - list
        apiGroups:
          - ''
        resources:
          - pods

  - kind: RoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: configmap-update-binding-${PREFIX}${BRANCH}
    subjects:
      - kind: ServiceAccount
        name: configmap-update-sa-${PREFIX}${BRANCH}
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: configmap-update-role-${PREFIX}${BRANCH}

  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: postgres-${PREFIX}${BRANCH}
      labels:
        io.kompose.service: postgres-${PREFIX}${BRANCH}
        app: postgres-${PREFIX}${BRANCH}
    spec:
      selector:
        matchLabels:
          io.kompose.service: postgres-${PREFIX}${BRANCH}
      template:
        metadata:
          labels:
            io.kompose.network/${NAMESPACE}-default-${PREFIX}${BRANCH}: 'true'
            io.kompose.service: postgres-${PREFIX}${BRANCH}
        spec:
          volumes:
            - name: postgres-claim-${PREFIX}${BRANCH}
              persistentVolumeClaim:
                claimName: postgres-claim-${PREFIX}${BRANCH}
            - name: init-database-${PREFIX}${BRANCH}
              configMap:
                name: init-database-${PREFIX}${BRANCH}
                defaultMode: 420
          containers:
            - name: postgres-${PREFIX}${BRANCH}
              resources:
                limits:
                  cpu: ${POSTGRES_CPU_LIMIT}
                  memory: ${POSTGRES_MEMORY_LIMIT}
              env:
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: "${DB_SECRET}-${PREFIX}${BRANCH}"
                      key: POSTGRES_DB
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${DB_SECRET}-${PREFIX}${BRANCH}"
                      key: POSTGRES_PASSWORD
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: "${DB_SECRET}-${PREFIX}${BRANCH}"
                      key: POSTGRES_USER
                - name: INTERNAL_POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: "${DB_SECRET}-${PREFIX}${BRANCH}"
                      key: INTERNAL_POSTGRES_DB
                - name: INTERNAL_POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${DB_SECRET}-${PREFIX}${BRANCH}"
                      key: INTERNAL_POSTGRES_PASSWORD
                - name: INTERNAL_POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: "${DB_SECRET}-${PREFIX}${BRANCH}"
                      key: INTERNAL_POSTGRES_USER
                - name: PGDATA
                  value: /var/lib/postgresql/data/pgdata
              ports:
                - containerPort: ${{DB_PORT}}
                  protocol: TCP
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: postgres-claim-${PREFIX}${BRANCH}
                  mountPath: /pgdata
                - name: init-database-${PREFIX}${BRANCH}
                  mountPath: /docker-entrypoint-initdb.d/init-database.sh
                  subPath: init-database.sh
              terminationMessagePolicy: File
              image: 'postgis/postgis@sha256:bf36402dbbf24da8945ebb10750c0f35c30deeda8799f73a53548a2e4c6f92f9'
     
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: pygeoapi-${PREFIX}${BRANCH}
      labels:
        io.kompose.service: pygeoapi-${PREFIX}${BRANCH}
        app: pygeoapi-${PREFIX}${BRANCH}
    spec:
      selector:
        matchLabels:
          io.kompose.service: pygeoapi-${PREFIX}${BRANCH}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            io.kompose.service: pygeoapi-${PREFIX}${BRANCH}
        spec:
          volumes:
            - name: pygeoapi-config-${PREFIX}${BRANCH}
              configMap:
                name: pygeoapi-config-${PREFIX}${BRANCH}
                defaultMode: 420
          containers:
            - resources:
                limits:
                  cpu: ${PYGEOAPI_CPU_LIMIT}
                  memory: ${PYGEOAPI_MEMORY_LIMIT}
              terminationMessagePath: /dev/termination-log
              name: pygeoapi-${PREFIX}${BRANCH}
              env:
                - name: CONTAINER_PORT
                  value: '5000'
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: "${DB_SECRET}-${PREFIX}${BRANCH}"
                      key: INTERNAL_POSTGRES_DB
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${DB_SECRET}-${PREFIX}${BRANCH}"
                      key: INTERNAL_POSTGRES_PASSWORD
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: "${DB_SECRET}-${PREFIX}${BRANCH}"
                      key: INTERNAL_POSTGRES_USER
                - name: POSTGRES_HOST
                  value: postgres-${PREFIX}${BRANCH}
                - name: LAJI_AUTH_URL
                  value: ${LAJI_AUTH_URL}
                - name: RESTRICT_ACCESS
                  value: ${RESTRICT_ACCESS}
                - name: SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: "pygeoapi-secret-${PREFIX}${BRANCH}"
                      key: SECRET_KEY
              ports:
                - containerPort: 5000
                  protocol: TCP
              imagePullPolicy: Always
              volumeMounts:
                - name: pygeoapi-config-${PREFIX}${BRANCH}
                  mountPath: /pygeoapi/local.config.yml
                  subPath: pygeoapi-config.yml
                - name: pygeoapi-config-${PREFIX}${BRANCH}
                  mountPath: /pygeoapi/catalogue.tinydb
                  subPath: catalogue.tinydb
              terminationMessagePolicy: File
              image: ghcr.io/luomus/laji-pygeoapi-pygeoapi:${BRANCH}
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler

  - kind: CronJob
    apiVersion: batch/v1
    metadata:
      name: python-scripts-${PREFIX}${BRANCH}
      labels:
        app: python-scripts-${PREFIX}${BRANCH}
    spec:
      schedule: "0 0 * * 6"
      startingDeadlineSeconds: 600
      concurrencyPolicy: Forbid
      suspend: false
      jobTemplate:
        metadata:
          creationTimestamp: null
        spec:
          template:
            metadata:
              creationTimestamp: null
            spec:
              restartPolicy: Never
              serviceAccountName: configmap-update-sa-${PREFIX}${BRANCH}
              schedulerName: default-scheduler
              terminationGracePeriodSeconds: 30
              securityContext: {}
              containers:
                - name: python-scripts
                  image: 'ghcr.io/luomus/laji-pygeoapi-python-scripts:${BRANCH}'
                  env:
                    - name: POSTGRES_DB
                      valueFrom:
                        secretKeyRef:
                          name: "${DB_SECRET}-${PREFIX}${BRANCH}"
                          key: POSTGRES_DB
                    - name: POSTGRES_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: "${DB_SECRET}-${PREFIX}${BRANCH}"
                          key: POSTGRES_PASSWORD
                    - name: POSTGRES_USER
                      valueFrom:
                        secretKeyRef:
                          name: "${DB_SECRET}-${PREFIX}${BRANCH}"
                          key: POSTGRES_USER
                    - name: POSTGRES_HOST
                      value: postgres-${PREFIX}${BRANCH}
                    - name: PAGES
                      value: ${PAGES}
                    - name: LAJI_API_URL
                      value: ${LAJI_API_URL}
                    - name: CONFIG_MAP_NAME
                      value: "pygeoapi-config-${PREFIX}${BRANCH}"
                    - name: SERVICE_NAME
                      value: "pygeoapi-${PREFIX}${BRANCH}"
                    - name: MULTIPROCESSING
                      value: ${MULTIPROCESSING}
                    - name: RUNNING_IN_OPENSHIFT
                      value: ${RUNNING_IN_OPENSHIFT}
                    - name: ACCESS_TOKEN
                      value: ${ACCESS_TOKEN}
                    - name: PYTHONUNBUFFERED
                      value: '1'
                  resources: 
                    limits:
                      cpu: ${PYTHON_SCRIPTS_CPU_LIMIT}
                      memory: ${PYTHON_SCRIPTS_MEMORY_LIMIT}
                  volumeMounts:
                    - name: pygeoapi-config-${PREFIX}${BRANCH}
                      mountPath: /app/pygeoapi-config.yml
                      subPath: pygeoapi-config.yml
                    - name: pygeoapi-config-${PREFIX}${BRANCH}
                      mountPath: /app/catalogue.tinydb
                      subPath: catalogue.tinydb
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
                  imagePullPolicy: Always
              serviceAccount: configmap-update-sa-${PREFIX}${BRANCH}
              volumes:
                - name: pygeoapi-config-${PREFIX}${BRANCH}
                  configMap:
                    name: pygeoapi-config-${PREFIX}${BRANCH}
                    defaultMode: 420
              dnsPolicy: ClusterFirst
      successfulJobsHistoryLimit: 1
      failedJobsHistoryLimit: 1

  - kind: Service
    apiVersion: v1
    metadata:
      name: postgres-${PREFIX}${BRANCH}
      labels:
        io.kompose.service: postgres-${PREFIX}${BRANCH}
    spec:
      ports:
        - name: ${DB_PORT}
          protocol: TCP
          port: ${{DB_PORT}}
          targetPort: ${{DB_PORT}}
      selector:
        io.kompose.service: postgres-${PREFIX}${BRANCH}

  - kind: Service
    apiVersion: v1
    metadata:
      name: pygeoapi-${PREFIX}${BRANCH}
      labels:
        io.kompose.service: pygeoapi-${PREFIX}${BRANCH}
    spec:
      ports:
        - name: ${PYGEOAPI_PORT}
          protocol: TCP
          port: ${{PYGEOAPI_PORT}}
          targetPort: ${{PYGEOAPI_PORT}}
      selector:
        io.kompose.service: pygeoapi-${PREFIX}${BRANCH}

  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: geoapi-laji-fi-${PREFIX}${BRANCH}
      labels:
        io.kompose.service: pygeoapi-${PREFIX}${BRANCH}
        app: pygeoapi-${PREFIX}${BRANCH}
      annotations:
        haproxy.router.openshift.io/rewrite-target: /
        openshift.io/host.generated: 'true'
    spec:
      host: "${HOST_URL}"
      path: "${HOST_PATH}"
      to:
        kind: Service
        name: pygeoapi-${PREFIX}${BRANCH}
        weight: 100
      port:
        targetPort: ${{PYGEOAPI_PORT}}
      tls:
        termination: edge
      wildcardPolicy: None
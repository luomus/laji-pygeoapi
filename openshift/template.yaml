kind: Template
apiVersion: template.openshift.io/v1
parameters:
  - name: DB_SECRET
    required: true
    value: db-secret
  - name: NAMESPACE
    required: true
    value: laji-pygeoapi
  - name: BRANCH
    required:
    value: main
  - name: POSTGRES_PASSWORD
    required: true
  - name: POSTGRES_USER
    required: true
  - name: POSTGRES_DB
    required: true
  - name: STORAGE_CLASS
    required: true
    value: standard-csi
  - name: HOST_URL
    required: true
  - name: DB_PORT
    required: true
    value: "5432"
  - name: PYGEOAPI_PORT
    required: true
    value: "5000"
  - name: GITHUB_REPOSITORY_URL 
    displayName: Source Repository URL 
    description: The URL of the repository with the application source code 
    value: https://github.com/luomus/laji-pygeoapi.git
    required: true 
  - name: GITHUB_SECRET
    required: true
    generate: expression
    from: "[a-zA-Z0-9]{20}"
  - name: PAGES
    description: Defines the number of pages to download from the laji.fi occurrence API. Default is "all" but for testing purposes, use smaller number, for e.g. 2
    required: true
    value: "3"
    
metadata:
  name: template
  annotations:
    openshift.io/display-name: "OGC API for laji.fi data"
    description: >-
        Pygeoapi based server implementation of the OGC API Features standard for the data from laji.fi
        More info: https://github.com/luomus/laji-pygeoapi

objects:
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: postgres-claim-${BRANCH}
      labels:
        io.kompose.service: postgres-claim-${BRANCH}
        app: postgres-${BRANCH}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
      storageClassName: ${STORAGE_CLASS}
      volumeMode: Filesystem

  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${DB_SECRET}-${BRANCH}
    data:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    type: Opaque


  
  
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: pygeoapi-openapi-${BRANCH}
      labels:
        app: pygeoapi-${BRANCH}
    immutable: false
    data:
      pygeoapi-openapi-${BRANCH}.yml: ''

  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: pygeoapi-config-${BRANCH}
      labels:
        app: pygeoapi-${BRANCH}
    data:
      pygeoapi-config.yml: |-
        server:
            bind:
                host: 0.0.0.0
                port: ${PYGEOAPI_PORT}
            url: https://${HOST_URL}
            mimetype: application/json; charset=UTF-8
            encoding: utf-8
            gzip: false
            languages:
                - en-US
            # cors: true
            pretty_print: true
            limit: 10
            # templates:
              # path: /path/to/Jinja2/templates
              # static: /path/to/static/folder # css/js/img
            map:
                url: https://tile.openstreetmap.org/{z}/{x}/{y}.png
                attribution: '&copy; <a href="https://openstreetmap.org/copyright">OpenStreetMap contributors</a>'
            # ogc_schemas_location: /opt/schemas.opengis.net
            
        logging:
            level: ERROR
            #logfile: /tmp/pygeoapi.log
        metadata:
            identification:
                title:
                    en: FinBIF occurrence data OGC API
                description:
                    en: This portal allows you to query and fetch occurrence data from the repositories of Finnish Biodiversity Information Facility (FinBIF). Currently, this portal includes data specified by virva-authority filters. 
                keywords:
                    en:
                        - occurrence
                        - geospatial data
                        - api
                keywords_type: theme
                terms_of_service: https://creativecommons.org/licenses/by/4.0/
                url: https://example.org
            license:
                name: CC-BY 4.0 license
                url: https://creativecommons.org/licenses/by/4.0/
            provider:
                name: Luomus
                url: https://laji.fi/
            contact:
                name: Alpo, Turunen
                position: Spatial Data Specialist
                address: Pohjoinen Rautatiekatu 13 
                city: Helsinki
                stateorprovince: Uusimaa
                postalcode: FI-00100
                country: Finland
                phone: +358 29 412 8819
                email: alpo.turunen@helsinki.fi
                url: https://laji.fi/
                hours: Mo-Fr 08:00-17:00
                instructions: During hours of service. Off on weekends.
                role: pointOfContact
        resources:
            Birds:
                type: collection
                title: Birds 
                description: occurrences from laji.fi
                keywords:
                    en:
                        - Birds
                        - species
                extents:
                    spatial:
                        bbox: [19.33897, 59.504462, 31.307532, 70.069293]
                        crs: https://www.opengis.net/def/crs/EPSG/0/4326
                    temporal: 
                        begin: 2023-07-12T00:00:00Z
                        end: 2024-05-20T03:40:00Z
                providers:
                  - type: feature
                    name: PostgreSQL
                    data:
                        host: postgres
                        port: ${DB_PORT}
                        dbname: tmp
                        user: tmp
                        password: tmp
                    id_field: localID
                    uri: occurrenceID
                    table: Birds
                    geom_field: geometry
                    time_field: datetimestamp
                    title_field: scientificNameInterpreted
                    crs:
                        - https://www.opengis.net/def/crs/EPSG/0/4326
                        - https://www.opengis.net/def/crs/EPSG/0/3067
                        


  - kind: ServiceAccount
    apiVersion: v1
    metadata:
      name: configmap-update-sa-${BRANCH}
      labels:
        app: python-scripts-${BRANCH}
    secrets:
      - name: ${DB_SECRET}-${BRANCH}
  
  
  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      name: pygeoapi-build-${BRANCH}
      labels:
        app: pygeoapi-${BRANCH}
    spec:
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: pygeoapi-${BRANCH}:latest
      resources: {}
      successfulBuildsHistoryLimit: 5
      failedBuildsHistoryLimit: 5
      strategy:
        type: Docker
        dockerStrategy:
          dockerfilePath: pygeoapi/Dockerfile
      postCommit: {}
      source:
        type: Git
        git:
          uri: "${GITHUB_REPOSITORY_URL}"
          ref: "${BRANCH}"
      triggers:
        - type: ConfigChange
      runPolicy: Serial

  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      name: python-scripts-build-${BRANCH}
      labels:
        app: python-scripts-${BRANCH}
    spec:
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: 'python-scripts-${BRANCH}:latest'
      strategy:
        type: Docker
        dockerStrategy: {}
      postCommit: {}
      source:
        type: Git
        git:
          uri: "${GITHUB_REPOSITORY_URL}"
          ref: "${BRANCH}"
      triggers:
        - type: GitHub
          github:
            secret: "${GITHUB_SECRET}"
        - type: Generic
          generic:
            secret: "${GITHUB_SECRET}"
      runPolicy: Serial

  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: postgres-${BRANCH}
      labels:
        io.kompose.service: postgres-${BRANCH}
        app: postgres-${BRANCH}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: latest
          from:
            kind: DockerImage
            name: postgis/postgis
          generation: 1
          importPolicy:
            importMode: Legacy
          referencePolicy:
            type: Source
            
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: pygeoapi-${BRANCH} 
      labels:
        app:
    spec:
      lookupPolicy:
        local: true
      tags:
        - name: latest
          generation: 1
          importPolicy:
            importMode: Legacy
          referencePolicy:
            type: Source




  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: python-scripts-${BRANCH}
      labels:
        io.kompose.service: ${NAMESPACE}-${BRANCH}
        app: python-scripts-${BRANCH}
    spec:
      lookupPolicy:
        local: true
      tags:
        - name: latest
          from:
            kind: DockerImage
            name: python-scripts-${BRANCH}
          generation: 1
          importPolicy:
            importMode: Legacy
          referencePolicy:
            type: Source

  - kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: configmap-update-role-${BRANCH}
      labels:
        app: python-scripts-${BRANCH}
    rules:
      - verbs:
          - patch
        apiGroups:
          - ''
        resources:
          - configmaps
        resourceNames:
          - pygeoapi-config-${BRANCH}
      - verbs:
          - delete
          - list
        apiGroups:
          - ''
        resources:
          - pods

  - kind: RoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: configmap-update-binding-${BRANCH}
    subjects:
      - kind: ServiceAccount
        name: configmap-update-sa-${BRANCH}
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: configmap-update-role-${BRANCH}

 
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: postgres-${BRANCH}
      labels:
        io.kompose.service: postgres-${BRANCH}
        app: postgres-${BRANCH}
    spec:
      selector:
        matchLabels:
          io.kompose.service: postgres-${BRANCH}
      template:
        metadata:
          labels:
            io.kompose.network/${NAMESPACE}-default-${BRANCH}: 'true'
            io.kompose.service: postgres-${BRANCH}
        spec:
          volumes:
            - name: postgres-claim-${BRANCH}
              persistentVolumeClaim:
                claimName: postgres-claim-${BRANCH}
          containers:
            - name: postgres-${BRANCH}
              env:
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: "${DB_SECRET}-${BRANCH}"
                      key: POSTGRES_DB
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${DB_SECRET}-${BRANCH}"
                      key: POSTGRES_PASSWORD
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: "${DB_SECRET}-${BRANCH}"
                      key: POSTGRES_USER
                - name: PGDATA
                  value: /var/lib/postgresql/data/pgdata
              ports:
                - containerPort: ${{DB_PORT}}
                  protocol: TCP
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: postgres-claim-${BRANCH}
                  mountPath: /pgdata
              terminationMessagePolicy: File
              image: 'postgis/postgis@sha256:bf36402dbbf24da8945ebb10750c0f35c30deeda8799f73a53548a2e4c6f92f9'
     
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: pygeoapi-${BRANCH}
      # annotations:
        # image.openshift.io/triggers: |-
          # [
            # {
              # "from": {
                # "kind": "ImageStreamTag",
                # "name": "pygeoapi-${BRANCH}:latest"
              # },
              # "fieldPath": "spec.template.spec.containers[0].image"
            # }
          # ]
      labels:
        io.kompose.service: pygeoapi-${BRANCH}
        app: pygeoapi-${BRANCH}
    spec:
      selector:
        matchLabels:
          io.kompose.service: pygeoapi-${BRANCH}
      template:
        metadata:
          labels:
            io.kompose.service: pygeoapi-${BRANCH}
        spec:
          volumes:
            - name: pygeoapi-config-${BRANCH}
              configMap:
                name: pygeoapi-config-${BRANCH}
                defaultMode: 420
          containers:
            - resources: {}
              terminationMessagePath: /dev/termination-log
              name: pygeoapi-${BRANCH}
              env:
                - name: PYGEOAPI_CONFIG
                  value: pygeoapi-config-${BRANCH}.yml
                - name: PYGEOAPI_OPENAPI
                  value: pygeoapi-openapi-${BRANCH}.yml
                - name: CONTAINER_PORT
                  value: '5000'
              ports:
                - containerPort: 5000
                  protocol: TCP
              #imagePullPolicy: Always
              volumeMounts:
                - name: pygeoapi-config-${BRANCH}
                  mountPath: /pygeoapi/local.config.yml
                  subPath: pygeoapi-config.yml
              terminationMessagePolicy: File
              image: pygeoapi-${BRANCH}:latest
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler

  - kind: CronJob
    apiVersion: batch/v1
    metadata:
      name: python-scripts-${BRANCH}
      labels:
        app: python-scripts-${BRANCH}
    spec:
      schedule: "*/1 * * * *"
      concurrencyPolicy: Forbid
      suspend: false
      jobTemplate:
        metadata:
          creationTimestamp: null
        spec:
          template:
            metadata:
              creationTimestamp: null
            spec:
              restartPolicy: OnFailure
              serviceAccountName: configmap-update-sa-${BRANCH}
              schedulerName: default-scheduler
              terminationGracePeriodSeconds: 30
              securityContext: {}
              containers:
                - name: python-scripts
                  image: python-scripts-${BRANCH}:latest
                  env:
                    - name: POSTGRES_DB
                      valueFrom:
                        secretKeyRef:
                          name: "${DB_SECRET}-${BRANCH}"
                          key: POSTGRES_DB
                    - name: POSTGRES_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: "${DB_SECRET}-${BRANCH}"
                          key: POSTGRES_PASSWORD
                    - name: POSTGRES_USER
                      valueFrom:
                        secretKeyRef:
                          name: "${DB_SECRET}-${BRANCH}"
                          key: POSTGRES_USER
                    - name: POSTGRES_HOST
                      value: postgres-${BRANCH}
                    - name: PAGES
                      value: ${PAGES}
                    - name: BRANCH
                      value: ${BRANCH}
                  resources: {}
                  volumeMounts:
                    - name: pygeoapi-config-${BRANCH}
                      mountPath: /app/pygeoapi-config.yml
                      subPath: pygeoapi-config.yml
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
                  imagePullPolicy: Always
              serviceAccount: configmap-update-sa-${BRANCH}
              volumes:
                - name: pygeoapi-config-${BRANCH}
                  configMap:
                    name: pygeoapi-config-${BRANCH}
                    defaultMode: 420
              dnsPolicy: ClusterFirst
      successfulJobsHistoryLimit: 3
      failedJobsHistoryLimit: 1

  - kind: CronJob
    apiVersion: batch/v1
    metadata:
      name: prune-old-objects-${BRANCH}
      app: meta
    spec:
      schedule: 0 0 * * *
      concurrencyPolicy: Allow
      suspend: false
      jobTemplate:
        metadata:
          creationTimestamp: null
        spec:
          template:
            metadata:
              creationTimestamp: null
            spec:
              containers:
                - name: prune-${BRANCH}
                  image: openshift/origin-cli
                  command:
                    - /bin/bash
                    - '-c'
                    - |
                      oc adm prune deployments --keep-complete=2 --keep-failed=3
                      oc adm prune builds --keep-complete=2 --keep-failed=3
                  resources: {}
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
                  imagePullPolicy: Always
              restartPolicy: OnFailure
              terminationGracePeriodSeconds: 30
              dnsPolicy: ClusterFirst
              securityContext: {}
              schedulerName: default-scheduler
      successfulJobsHistoryLimit: 3
      failedJobsHistoryLimit: 1
    status: {}




  - kind: Service
    apiVersion: v1
    metadata:
      name: postgres-${BRANCH}
      labels:
        io.kompose.service: postgres-${BRANCH}
    spec:
      ports:
        - name: ${DB_PORT}
          protocol: TCP
          port: ${{DB_PORT}}
          targetPort: ${{DB_PORT}}
      selector:
        io.kompose.service: postgres-${BRANCH}

  - kind: Service
    apiVersion: v1
    metadata:
      name: pygeoapi-${BRANCH}
      labels:
        io.kompose.service: pygeoapi-${BRANCH}
    spec:
      ports:
        - name: ${PYGEOAPI_PORT}
          protocol: TCP
          port: ${{PYGEOAPI_PORT}}
          targetPort: ${{PYGEOAPI_PORT}}
      selector:
        io.kompose.service: pygeoapi-${BRANCH}



  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: geoapi-laji-fi-${BRANCH}
      labels:
        io.kompose.service: pygeoapi-${BRANCH}
        app: pygeoapi-${BRANCH}
      annotations:
        openshift.io/host.generated: 'true'
    spec:
      host: "${HOST_URL}"
      to:
        kind: Service
        name: pygeoapi-${BRANCH}
        weight: 100
      port:
        targetPort: ${{PYGEOAPI_PORT}}
      tls:
        termination: edge
      wildcardPolicy: None